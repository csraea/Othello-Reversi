#pragma checksum "C:\Users\csrae\OneDrive\Desktop\reversi2020-master\ReversiWeb\Views\Othello\SinglePlayerGameSettings.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f62596b611aae8120ca892e44e551d82b884f068"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Othello_SinglePlayerGameSettings), @"mvc.1.0.view", @"/Views/Othello/SinglePlayerGameSettings.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\csrae\OneDrive\Desktop\reversi2020-master\ReversiWeb\Views\_ViewImports.cshtml"
using ReversiWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\csrae\OneDrive\Desktop\reversi2020-master\ReversiWeb\Views\_ViewImports.cshtml"
using ReversiWeb.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\csrae\OneDrive\Desktop\reversi2020-master\ReversiWeb\Views\Othello\SinglePlayerGameSettings.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f62596b611aae8120ca892e44e551d82b884f068", @"/Views/Othello/SinglePlayerGameSettings.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7985fd2247920b1ab4adf4428649d066ab6a65c0", @"/Views/_ViewImports.cshtml")]
    public class Views_Othello_SinglePlayerGameSettings : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Othello", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "AdjustSinglePlayer", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("z-index: 2"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Users\csrae\OneDrive\Desktop\reversi2020-master\ReversiWeb\Views\Othello\SinglePlayerGameSettings.cshtml"
  
	ViewData["Title"] = "SinglePlayerGameSettings";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\t");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f62596b611aae8120ca892e44e551d82b884f0685390", async() => {
                WriteLiteral(@"
		<style>

			body{
				overflow-y: hidden;
			}

			.context {
				width: 100%;
				position: absolute;
				top:50vh;
	
			}

			.context h1{
				text-align: center;
				color: #fff;
				font-size: 50px;
			}


			.area {
				/*background: #4e54c8;
				background: -webkit-linear-gradient(to left, #8f94fb, #4e54c8);*/
				width: 100%;
				height: 100vh;
			}

			.circles {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				overflow: hidden;
				z-index: -1;
			}

			.circles li {
				position: absolute;
				display: block;
				list-style: none;
				width: 20px;
				height: 20px;
				background: rgba(255, 255, 255, 0.2);
				animation: animate 25s linear infinite;
				bottom: -150px;
				z-index: -1;
			}

			.circles li:nth-child(1) {
				left: 25%;
				width: 80px;
				height: 80px;
				animation-delay: 0s;
				background: rgba(255, 255, 0, 0.2);
			}


			.circles li:nth-child(2){
				left: 10%;
				width: 50p");
                WriteLiteral(@"x;
				height: 50px;
				animation-delay: 2s;
				animation-duration: 12s;
				background: rgba(125, 125, 255, 0.2);
			}

			.circles li:nth-child(3){
				left: 70%;
				width: 20px;
				height: 20px;
				animation-delay: 4s;
				background: rgba(255, 0, 255, 0.2);
			}

			.circles li:nth-child(4){
				left: 40%;
				width: 60px;
				height: 60px;
				animation-delay: 0s;
				animation-duration: 18s;
			}

			.circles li:nth-child(5){
				left: 65%;
				width: 20px;
				height: 20px;
				animation-delay: 0s;
				background: rgba(0, 255, 255, 0.2);
			}

			.circles li:nth-child(6){
				left: 75%;
				width: 110px;
				height: 110px;
				animation-delay: 3s;
				background: rgba(255, 0, 0, 0.2);
			}

			.circles li:nth-child(7){
				left: 35%;
				width: 130px;
				height: 130px;
				animation-delay: 7s;
				background: rgba(0, 255, 0, 0.2);
			}

			.circles li:nth-child(8){
				left: 50%;
				width: 25px;
				height: 25px;
				animation-delay: 15s;
				a");
                WriteLiteral(@"nimation-duration: 45s;
				background: rgba(255, 100, 25, 0.2);
			}

			.circles li:nth-child(9){
				left: 20%;
				width: 15px;
				height: 15px;
				animation-delay: 2s;
				animation-duration: 35s;
				background: rgba(0, 0, 255, 0.2);
			}

			.circles li:nth-child(10) {
				left: 85%;
				width: 150px;
				height: 150px;
				animation-delay: 0s;
				animation-duration: 30s;
				background: rgba(111, 80, 255, 0.2);
			}

			.circles li:nth-child(11) {
				left: 5%;
				width: 20px;
				height: 20px;
				animation-delay: 0s;
				animation-duration: 19s;
				background: rgba(111, 255, 255, 0.2);
			}
			.circles li:nth-child(12) {
				left: 0%;
				width: 90px;
				height: 90px;
				animation-delay: 10s;
				animation-duration: 12s;
				background: rgba(255, 255, 0, 0.2);
			}

			.circles li:nth-child(13) {
				left: 55%;
				width: 10px;
				height: 10px;
				animation-delay: 5s;
				animation-duration: 25s;
				background: rgba(0, 255, 255, 0.2);
			}

");
                WriteLiteral(@"
			.circles li:nth-child(14) {
				left: 95%;
				width: 35px;
				height: 35px;
				animation-delay: 8s;
				animation-duration: 10s;
			}

			.circles li:nth-child(15) {
				left: 91%;
				width: 15px;
				height: 15px;
				animation-delay: 10s;
				animation-duration: 41s;
				background: rgba(255, 50, 255, 0.2);
			}

			.circles li:nth-child(16) {
				left: 5%;
				width: 18px;
				height: 18px;
				animation-delay: 14s;
				animation-duration: 29s;
				background: rgba(255, 0, 0, 0.2);
			}



			");
                WriteLiteral(@"@keyframes animate {

				0% {
					transform: translateY(0) rotate(0deg);
					opacity: 1;
					border-radius: 0;
				}

				100% {
					transform: translateY(-1000px) rotate(720deg);
					opacity: 0;
					border-radius: 50%;
				}
			}


			");
                WriteLiteral(@"@media screen and (max-width: 767px) {
				body {
					overflow-y: visible;
				}
			}



			input[type=range].BSize {
  -webkit-appearance: none;
  width: 100%;
  margin: 11.75px 0;
}
input[type=range].BSize:focus {
  outline: none;
}
input[type=range].BSize::-webkit-slider-runnable-track {
  width: 100%;
  height: 6.5px;
  cursor: pointer;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);
  background: #00ffe6;
  border-radius: 0px;
  border: 0px solid #000000;
}
input[type=range].BSize::-webkit-slider-thumb {
  box-shadow: 0px 0px 0px #ffffff, 0px 0px 0px #ffffff;
  border: 1.9px solid #000000;
  height: 30px;
  width: 30px;
  border-radius: 50px;
  background: #ffffff;
  cursor: pointer;
  -webkit-appearance: none;
  margin-top: -11.75px;
}
input[type=range].BSize:focus::-webkit-slider-runnable-track {
  background: #00ffe6;
}
input[type=range].BSize::-moz-range-track {
  width: 100%;
  height: 6.5px;
  cursor: pointer;
  box-shadow: 1p");
                WriteLiteral(@"x 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);
  background: #00ffe6;
  border-radius: 0px;
  border: 0px solid #000000;
}
input[type=range].BSize::-moz-range-thumb {
  box-shadow: 0px 0px 0px #ffffff, 0px 0px 0px #ffffff;
  border: 1.9px solid #000000;
  height: 30px;
  width: 30px;
  border-radius: 50px;
  background: #ffffff;
  cursor: pointer;
}
input[type=range].BSize::-ms-track {
  width: 100%;
  height: 6.5px;
  cursor: pointer;
  background: transparent;
  border-color: transparent;
  color: transparent;
}
input[type=range].BSize::-ms-fill-lower {
  background: #00ffe6;
  border: 0px solid #000000;
  border-radius: 0px;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);
}
input[type=range].BSize::-ms-fill-upper {
  background: #00ffe6;
  border: 0px solid #000000;
  border-radius: 0px;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0), 0px 0px 1px rgba(13, 13, 13, 0);
}
input[type=range].BSize::-ms-thumb {
  box-shadow: 0px 0px 0px #f");
                WriteLiteral(@"fffff, 0px 0px 0px #ffffff;
  border: 1.9px solid #000000;
  height: 30px;
  width: 30px;
  border-radius: 50px;
  background: #ffffff;
  cursor: pointer;
  height: 6.5px;
}
input[type=range].BSize:focus::-ms-fill-lower {
  background: #00ffe6;
}
input[type=range].BSize:focus::-ms-fill-upper {
  background: #00ffe6;
}

			.gs {
				padding: 10px 20px 11px !important;
				font-size: 21px !important;
				background-color: #8cff80;
				font-weight: bold;
				text-shadow: 1px 1px #8cff80;
				color: #ffffff;
				border-radius: 100px;
				-moz-border-radius: 100px;
				-webkit-border-radius: 100px;
				border: 1px solid #8cff80;
				cursor: pointer;
				box-shadow: 0 1px 0 rgba(255, 255, 255, 0.5) inset;
				-moz-box-shadow: 0 1px 0 rgba(255, 255, 255, 0.5) inset;
				-webkit-box-shadow: 0 1px 0 rgba(255, 255, 255, 0.5) inset;
			}


			.inputGroup {
	 background-color: #fff;
	 display: block;
	 margin-left:20%;
	 margin-right:20%;
	 position: relative;
}
 .inputGroup label {
	 pa");
                WriteLiteral(@"dding: 12px 30px;
	 width: 100%;
	 display: block;
	 text-align: left;
	 color: #3c454c;
	 cursor: pointer;
	 position: relative;
	 z-index: 2;
	 transition: color 200ms ease-in;
	 overflow: hidden;
}
 .inputGroup label:before {
	 width: 10px;
	 height: 10px;
	 border-radius: 50%;
	 content: '';
	 background-color: #5562eb;
	 position: absolute;
	 left: 50%;
	 top: 50%;
	 transform: translate(-50%, -50%) scale3d(1, 1, 1);
	 transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
	 opacity: 0;
	 z-index: -1;
}
 .inputGroup label:after {
	 width: 32px;
	 height: 32px;
	 content: '';
	 border: 2px solid #d1d7dc;
	 background-color: #fff;
	 background-image: url(""data:image/svg+xml,%3Csvg width='32' height='32' viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M5.414 11L4 12.414l5.414 5.414L20.828 6.414 19.414 5l-10 10z' fill='%23fff' fill-rule='nonzero'/%3E%3C/svg%3E "");
	 background-repeat: no-repeat;
	 background-position: 2px 3px;
	 border-radius: 50%;
	 z-index: 2;
	 position: absolute;
	 right");
                WriteLiteral(@": 30px;
	 top: 50%;
	 transform: translateY(-50%);
	 cursor: pointer;
	 transition: all 200ms ease-in;
}
 .inputGroup input:checked ~ label {
	 color: #fff;
}
 .inputGroup input:checked ~ label:before {
	 transform: translate(-50%, -50%) scale3d(56, 56, 1);
	 opacity: 1;
}
 .inputGroup input:checked ~ label:after {
	 background-color: #54e0c7;
	 border-color: #54e0c7;
}
 .inputGroup input {
	 width: 32px;
	 height: 32px;
	 order: 1;
	 z-index: 2;
	 position: absolute;
	 right: 30px;
	 top: 50%;
	 transform: translateY(-50%);
	 cursor: pointer;
	 visibility: hidden;
}
 














.switch_box{
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
	max-width: 320px;
	min-width: 320px;
    margin-top: 5%;
	height: 68px;
    margin-left: 10%;
	-webkit-box-pack: center;
	    -ms-flex-pack: center;
	        justify-content: center;
	-webkit-box-align: center;
	    -ms-flex-align: center;
	        align-items: center;
	-webkit-box-flex: 1;
	    -ms-flex: 1;
	        flex: 1");
                WriteLiteral(@";
}

/* Switch 1 Specific Styles Start */

.box_1{
	background: #eee;
}

input[type=""checkbox""].switch_1{
	font-size: 30px;
	-webkit-appearance: none;
	   -moz-appearance: none;
	        appearance: none;
	width: 5em;
	height: 1.5em;
	background: #ddd;
	border-radius: 3em;
	position: relative;
	cursor: pointer;
	outline: none;
	-webkit-transition: all .2s ease-in-out;
	transition: all .2s ease-in-out;
  }
  
  input[type=""checkbox""].switch_1:checked{
	background: orange;
  }
  
  input[type=""checkbox""].switch_1:after{
	position: absolute;
	content: """";
	width: 1.5em;
	height: 1.5em;
	border-radius: 50%;
	background: #fff;
	-webkit-box-shadow: 0 0 .25em rgba(0,0,0,.3);
	        box-shadow: 0 0 .25em rgba(0,0,0,.3);
	-webkit-transform: scale(.7);
	        transform: scale(.7);
	left: 0;
	-webkit-transition: all .2s ease-in-out;
	transition: all .2s ease-in-out;
  }
  
  input[type=""checkbox""].switch_1:checked:after{
	left: calc(100% - 1.5em);
  }
	
/* Switch 1 Sp");
                WriteLiteral("ecific Style End */\r\n\r\n\t\t</style>\r\n\t");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n\t");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f62596b611aae8120ca892e44e551d82b884f06816823", async() => {
                WriteLiteral("\r\n\r\n\r\n\t<div class=\"container\">\r\n\t\t");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f62596b611aae8120ca892e44e551d82b884f06817125", async() => {
                    WriteLiteral(@"


			<div class=""row"">

				<div class=""col-md"">
					<div class=""picker"">
						<div style=""margin-left: 5%"">Red</div> <input class=""sl"" type=""range"" min=""0"" max=""255"" step=""1"" id=""red"" name=""red"" value=""255"">
						<div style=""margin-left: 5%"">Green</div> <input class=""sl"" type=""range"" min=""0"" max=""255"" step=""1"" id=""green"" name=""green"" value=""0"">
						<div style=""margin-left: 5%"">Blue</div> <input class=""sl"" type=""range"" min=""0"" max=""255"" step=""1"" id=""blue"" name=""blue"" value=""0"">

						<div id=""display"" style=""margin-left: auto; margin-right: auto;""><b>Handsome Jack</b></div>

					</div>
					<script type=""text/javascript"">
						var input = document.querySelectorAll(""input"");
						for (var i = 0; i < input.length; i++) {
							input[i].addEventListener(""input"",
								function () {
									var red = document.getElementById(""red"").value,
										green = document.getElementById(""green"").value,
										blue = document.getElementById(""blue"").value;
									var display = docum");
                    WriteLiteral(@"ent.getElementById(""display"");
									display.style.background = ""rgb("" + red + "", "" + green + "", "" + blue + "")"";
									if ((red > 200 && blue > 200) || (red > 200 && green > 200) || (green > 200 && blue > 180)) display.style.color = ""black"";
									else display.style.color = ""#ffffff"";
								});
						}
					</script>
				</div>

				<div class=""col-md"">

					<div class=""picker"">
						<div style=""margin-left: 5%"">Red</div> <input class=""sl"" type=""range"" min=""0"" max=""255"" step=""1"" id=""red1"" name=""red1"" value=""0"">
						<div style=""margin-left: 5%"">Green</div> <input class=""sl"" type=""range"" min=""0"" max=""255"" step=""1"" id=""green1"" name=""green1"" value=""68"">
						<div style=""margin-left: 5%"">Blue</div> <input class=""sl"" type=""range"" min=""0"" max=""255"" step=""1"" id=""blue1"" name=""blue1"" value=""255"">

						<div id=""display1"" style=""margin-left: auto; margin-right: auto;""><b>Hero</b></div>

					</div>

					<script type=""text/javascript"">
						var input = document.querySelectorAll(""in");
                    WriteLiteral(@"put"");
						for (var i = 0; i < input.length; i++) {
							input[i].addEventListener(""input"",
								function () {
									var red = document.getElementById(""red1"").value,
										green = document.getElementById(""green1"").value,
										blue = document.getElementById(""blue1"").value;
									var display = document.getElementById(""display1"");
									display.style.background = ""rgb("" + red + "", "" + green + "", "" + blue + "")"";
									if ((red > 200 && blue > 200) || (red > 200 && green > 200) || (green > 200 && blue > 180)) display.style.color = ""black"";
									else display.style.color = ""#ffffff"";
								});
						}
					</script>

				</div>
			</div>

			<div class=""row"">
				<div class=""col-sm"">
                    <div class=""name"" style=""margin-top: 5%; margin-left: 10%; margin-right: 10%"">
                        <label for=""name"" style=""font-size: 24px;"">Name:</label><br>
                        <input type=""text"" name=""name"" id=""name"" size=""32"" title=""max. 32 characte");
                    WriteLiteral(@"rs"" required spellcheck=""true"" lang=""en"" autocomplete=""on""
                               placeholder=""Hero"" style=""border-radius: 10px; text-align: center; font-size: 24px; font-family: Courier, monospace; font-weight: bold; box-sizing: border-box;

                    WriteLiteral(@"     width: 100%;"" /><br>
                    </div>
					
					

                        <div class=""switch_box"">
                            <input type=""checkbox"" class=""switch_1"" id=""usable"" name=""usable"">
							<span style=""margin-left: 20px; font-size: 24px;"">Disable tips</span>
                        </div>

						<div class=""switch_box"">
							<input type=""checkbox"" class=""switch_1"" id=""jack"" name=""jack"">
                            <span style=""margin-left: 20px;font-size: 24px"">Shut Jack up</span>
						</div>

					</div>
				
				<div class=""col-sm"" >
					<h4 style=""text-align: center; margin-top: 7%; color: orange"">Select the difficulty</h4>
					<div class=""inputGroup"">
						<input id=""radio1"" name=""difficulty"" type=""radio"" value=""0"" checked=""checked""/>
						<label for=""radio1"">Easy</label>
					</div>
					<div class=""inputGroup"">
						<input id=""radio2"" name=""difficulty"" type=""radio"" value=""1""/>
						<label for=""radio2"">Medium</label>
					</div>
					<div cl");
                    WriteLiteral(@"ass=""inputGroup"">
						<input id=""radio3"" name=""difficulty"" type=""radio"" value=""2""/>
						<label for=""radio3"">Difficult</label>
					</div>
					<div class=""inputGroup"">
						<input id=""radio4"" name=""difficulty"" type=""radio"" value=""3""/>
						<label for=""radio4"">IMPOSSIBLE</label>
					</div>
				</div>
				</div>
			
			<div class=""row"">
				<div class=""col-sm"">
				<div class=""fl"" style=""margin-top: 0%; margin-left: 20%; margin-right: 20%"">
					
					<input class=""BSize"" type=""range"" min=""4"" max=""24"" step=""2"" id=""board"" name=""boardSize"" value=""8"" style=""border-color: rgba(0, 0, 0, 0); margin-top: 5%"">
                    <p style=""text-align: center; font-weight: bold; font-size: 18px"">BOARD SIZE &nbsp;: &nbsp;<span id=""demo"" style=""font-size: 24px""></span></p>
                    <script>
                        var slider = document.getElementById(""board"");
                        var output = document.getElementById(""demo"");
                        output.innerHTML = slider.value;");
                    WriteLiteral(@"

                        slider.oninput = function() {
                            output.innerHTML = this.value;
                        }
                    </script>

				</div>

				<div style=""text-align: center; margin-top: 3%"">
					<input type=""submit"" value=""PLAY"" class=""gs"" style=""border: 1px solid #8cff80; color: rgb(60, 60, 60);""/>
				</div>

				</div>

				</div>





		");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

		<ul class=""circles"">
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
			<li></li>
		</ul>



	</div>
	");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
